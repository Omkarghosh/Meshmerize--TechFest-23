#include <L298N.h>

#include <QTRSensors.h>




#define AIN1 2  //Assign the motor pins
#define BIN1 4
#define AIN2 3
#define BIN2 5
#define PWMA 9
#define PWMB 10
#define STBY 19

const int offsetA = 1;
const int offsetB = 1;

// Initializing motors.  The library will allow you to initialize as many
// motors as you have memory for.  If you are using functions like forward
// that take 2 motors as arguements you can either write new functions or
// call the function more than once.
L298N motor1(PWMA, AIN1, AIN2);
L298N motor2(PWMB, BIN1, BIN2);

QTRSensors qtr;


const uint8_t SensorCount = 5;
uint16_t sensorValues[SensorCount];
int threshold[SensorCount];

float Kp = 4;
float Ki = 0.05;
float Kd = 0.01;

uint8_t multiP = 1;
uint8_t multiI  = 1;
uint8_t multiD = 1;
uint8_t Kpfinal;
uint8_t Kifinal;
uint8_t Kdfinal;
float Pvalue;
float Ivalue;
float Dvalue;

boolean onoff = true;

int val, cnt = 0, v[3];

uint16_t position;
int P, D, I, previousError, PIDvalue, error;
int lsp, rsp;
int lfspeed = 230;

void setup()
{
  // configure the sensors
  qtr.setTypeAnalog();
  qtr.setSensorPins((const uint8_t[]){A0, A1, A2, A3, A4}, SensorCount);

  delay(500);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH); // turn on Arduino's LED to indicate we are in calibration mode
  // analogRead() takes about 0.1 ms on an AVR.
  // 0.1 ms per sensor * 4 samples per sensor read (default) * 6 sensors
  // * 10 reads per calibrate() call = ~24 ms per calibrate() call.
  // Call calibrate() 400 times to make calibration take about 10 seconds.
  for (uint16_t i = 0; i < 400; i++)
  {
    qtr.calibrate();
  }
  digitalWrite(LED_BUILTIN, LOW); // turn off Arduino's LED to indicate we are through with calibration

  // print the calibration minimum values measured when emitters were on
  
  for (uint8_t i = 0; i < SensorCount; i++)
  {
    threshold[i] = (qtr.calibrationOn.minimum[i] + qtr.calibrationOn.maximum[i])/2;
    Serial.print(threshold[i]);
    Serial.print("  ");
  }
  Serial.println();

  delay(1000);
}

void loop()
{
 
  robot_control();
}
void robot_control(){
  // read calibrated sensor values and obtain a measure of the line position
  // from 0 to 4000 (for a white line, use readLineWhite() instead)
  position = qtr.readLineBlack(sensorValues);
  error = 2000 - position;
  if(sensorValues[4] > 600){
    motor_drive(230,-230);
    delay(75);
    while(sensorValues[2]<600){ 
    motor_drive(230,-230);
    position = qtr.readLineBlack(sensorValues);
    }
  }
  if(sensorValues[2]>600 && sensorValues[4]<600){
    PID_Linefollow(error);
    position = qtr.readLineBlack(sensorValues);
  }
  if(sensorValues[0] > 600 &&sensorValues[2] < 600 &&  sensorValues[4]<600){
    motor_drive(-230,230);
    delay(75);
    while(sensorValues[2]<600){ 
    motor_drive(-230,230);
    position = qtr.readLineBlack(sensorValues);
    }
  }
  else if(sensorValues[0]>=600 && sensorValues[1]>=600 && sensorValues[2]>=600 && sensorValues[3]>=600 && sensorValues[4]>=600){
    while(sensorValues[0]>=600 && sensorValues[1]>=600 && sensorValues[2]>=600 && sensorValues[3]>=600 && sensorValues[4]>=600){
      motor_drive(230,-230);
      position = qtr.readLineBlack(sensorValues);
    }
  }
 
  PID_Linefollow(error);
  //PID_Linefollow(error);
}
void PID_Linefollow(int error){
    P = error;
    I = I + error;
    D = error - previousError;
    
    Pvalue = (Kp/pow(10,multiP))*P;
    Ivalue = (Ki/pow(10,multiI))*I;
    Dvalue = (Kd/pow(10,multiD))*D; 

    float PIDvalue = Pvalue + Ivalue + Dvalue;
    previousError = error;

    lsp = lfspeed - PIDvalue;
    rsp = lfspeed + PIDvalue;

    if (lsp > 130) {
      lsp = 130;
    }
    if (lsp < -130) {
      lsp = -130;
    }
    if (rsp > 130) {
      rsp = 130;
    }
    if (rsp < -130) {
      rsp = -130;
    }
    motor_drive(lsp,rsp);
}
//This void delimits each instruction.
//The  Arduino knows that for each instruction it will receive 2 bytes.

void motor_drive(int left, int right){
  
  if(right>0)
  {
    motor2.setSpeed(right);
    motor2.forward();
  }
  else 
  {
    motor2.setSpeed(right);
    motor2.backward();
  }
  
 
  if(left>0)
  {
    motor1.setSpeed(left);
    motor1.forward();
  }
  else 
  {
    motor1.setSpeed(left);
    motor1.backward();
  }
}
